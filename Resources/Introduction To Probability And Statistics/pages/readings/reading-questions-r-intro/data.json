
{
  "title":"Reading Questions - R Intro",
  "content":" Reading Questions Answer Checker To check your answers put them in the appropriate box and click the \u0026lsquo;Check\u0026rsquo; button. Every checker box can do arithmetic and calculate standard functions (see calculator help). If you give decimal answers, give them to at least 3 decimal places.\nAs you work you should have pencil and paper handy for calculations and thinking!\nNote: some questions ask for a formula. For the checker we ask you to plug a value into the formula. For your pset you still need to give the whole formula.\n//DEBUG PARAMETERS //Because we don\u0026rsquo;t show solutions for pset checkers we use //this to give a showanswer button during the debugging phase var debugans = undefined; //release //var debugans = kDebugAnswer; //debug problemNumber = 0; wl(\u0026quot;\u0026lt;h3\u0026gt;Calculator\u0026lt;/h3\u0026gt;\u0026quot;); writecalculator(\u0026ldquo;psetcheckcalcid\u0026rdquo;, \u0026ldquo;Calculate\u0026rdquo;); whr(kdivcol,kdivwid);\nAt this point you should have installed R and R studio. If not, you should do that now.\nThe first thing to do with R is to make sure you can start it and then we will do some simple calculations. Give your answers to at least 2 decimal places of accuracy. Go ahead and start R Studio. You should see a window with 4 panes. The command prompt (the \u0026gt;) is in the bottom left window.\n//Problem 1 problemNumber++; wl(problemheader(problemNumber)); wl(kp); var s; var partName, problemName, buttonLabel, answerArray, correct; s = [\u0026ldquo;At the command prompt type the command\u0026rdquo;, kp, rcmdna(\u0026ldquo;2 + 3\u0026rdquo;), kp, \u0026ldquo;Hit return and enter the result here.\u0026rdquo;]; wl(s.join(\u0026rsquo; \u0026lsquo;)); wl(kp); partName = problemNumber; problemName = \u0026ldquo;prob\u0026rdquo; + partName; buttonLabel = \u0026ldquo;Check problem \u0026quot; + partName; writeNumericBox(partName+\u0026ldquo;id\u0026rdquo;, 5, buttonLabel, 0.001, kuseCorrectVal); whr(kdivcol,kdivwid);\n//Problem 2 problemNumber++; wl(problemheader(problemNumber)); wl(kp); var s; var partName, problemName, buttonLabel, answerArray, correct; s = [\u0026ldquo;Do the following computations using R.\u0026rdquo;, kbr, \u0026ldquo;(Enter your answers in the boxes.)\u0026rdquo;]; wl(s.join(\u0026rsquo; \u0026lsquo;)); wl(kp); wl(rcmdna(\u0026ldquo;2*3\u0026rdquo;)); wl(kbr) partName = problemNumber + \u0026quot; (a)\u0026rdquo; problemName = \u0026ldquo;prob\u0026rdquo; + partName; buttonLabel = \u0026ldquo;Check problem \u0026quot; + partName; writeNumericBox(partName+\u0026ldquo;id\u0026rdquo;, 6, buttonLabel, 0.01, kuseCorrectVal); wl(kp) wl(rcmdna(\u0026ldquo;2^3\u0026rdquo;)); wl(kbr) partName = problemNumber + \u0026quot; (b)\u0026rdquo; problemName = \u0026ldquo;prob\u0026rdquo; + partName; buttonLabel = \u0026ldquo;Check problem \u0026quot; + partName; writeNumericBox(partName+\u0026ldquo;id\u0026rdquo;, 8, buttonLabel, 0.01, kuseCorrectVal); wl(kp) wl(rcmdna(\u0026ldquo;3.14^3.14\u0026rdquo;)); wl(kbr) partName = problemNumber + \u0026quot; (c)\u0026rdquo; problemName = \u0026ldquo;prob\u0026rdquo; + partName; buttonLabel = \u0026ldquo;Check problem \u0026quot; + partName; writeNumericBox(partName+\u0026ldquo;id\u0026rdquo;, 36.338, buttonLabel, 0.01, kuseCorrectVal); whr(kdivcol,kdivwid);\n//Problem 3 problemNumber++; wl(problemheader(problemNumber)); var s; var partName, problemName, buttonLabel, answerArray, correct; s = [\u0026ldquo;Use R to do the following computation.\u0026rdquo;, kbr, \u0026ldquo;(Enter your answer to 2 decimal places in the box.)\u0026rdquo;]; wl(s.join(\u0026rsquo; \u0026lsquo;)); wl(kp); wl(rcmdna(\u0026ldquo;100*mean(sin(30:87))\u0026rdquo;)); wl(kbr) partName = problemNumber problemName = \u0026ldquo;prob\u0026rdquo; + partName; buttonLabel = \u0026ldquo;Check problem \u0026quot; + partName; writeNumericBox(partName+\u0026ldquo;id\u0026rdquo;, -2.215, buttonLabel, 0.01, kuseCorrectVal); whr(kdivcol,kdivwid);\n//Problem 4 problemNumber++; wl(problemheader(problemNumber)); var s; var partName, problemName, buttonLabel, answerArray, correct; s = [\u0026ldquo;Now we\u0026rsquo;ll do our first random simulation. Don\u0026rsquo;t worry if you\u0026rdquo;, \u0026ldquo;don\u0026rsquo;t fully understand the commands. We will explain them in\u0026rdquo;, \u0026ldquo;the first tutorial. \u0026ldquo;, kp, \u0026ldquo;In order to simulate counting the number of heads in 1000 tosses of\u0026rdquo;, \u0026ldquo;a fair coin give the following sequence of commands.\u0026rdquo;, kp, \u0026ldquo;(Hit return after each one).\u0026rdquo;]; wl(s.join(\u0026rsquo; \u0026lsquo;)); wl(kp); wl(rcmdna(\u0026ldquo;x = rbinom(1000,1,.5)\u0026rdquo;)); wl(kbr) wl(rcmdna(\u0026ldquo;total = sum(x)\u0026rdquo;)); wl(kp); wl(\u0026ldquo;You can use the up arrow to go back and run the commands again. You should get a different total.\u0026rdquo;); wl(kp); wl(\u0026ldquo;Give the value of the total number of heads for one of your simulations.\u0026rdquo;); wl(kbr) partName = problemNumber problemName = \u0026ldquo;prob\u0026rdquo; + partName; buttonLabel = \u0026ldquo;Check problem \u0026quot; + partName; s = \u0026ldquo;Expect the answer will be between 450 and 550\u0026rdquo;; writeNumericBox(partName+\u0026ldquo;id\u0026rdquo;, 500, buttonLabel, 460, s); whr(kdivcol,kdivwid);\n"}


